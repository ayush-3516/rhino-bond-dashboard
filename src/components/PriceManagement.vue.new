<script setup>
import { ref, onMounted, computed } from 'vue'
import { usePriceStore } from '@/stores/price'

const props = defineProps({
  searchTerm: {
    type: String,
    default: ''
  }
})

const priceStore = usePriceStore()
const selectedProduct = ref(null)
const selectedProductId = computed({
  get: () => selectedProduct.value?.id || null,
  set: (id) => {
    selectedProduct.value = priceStore.products.find(p => p.id === id) || null
  }
})
const newPrice = ref({
  variation: '',
  price: null
})
const editingPrice = ref(null)
const errorMessage = ref('')
const isLoading = ref(false)

onMounted(async () => {
  isLoading.value = true
  try {
    await priceStore.fetchProductsWithPrices()
  } catch (error) {
    errorMessage.value = 'Failed to load products and prices'
  } finally {
    isLoading.value = false
  }
})

const parseVariation = (variation) => {
  // Extract numeric value from variation string (e.g. "1kg" -> 1)
  const match = variation.match(/\d+/)
  return match ? parseFloat(match[0]) : 0
}

const filteredProducts = computed(() => {
  if (!props.searchTerm) return priceStore.products
  
  const term = props.searchTerm.toLowerCase()
  return priceStore.products.filter(product => 
    product.name.toLowerCase().includes(term)
  )
})

const currentPrices = computed(() => {
  if (!selectedProduct.value) return []
  const prices = priceStore.getPrices(selectedProduct.value.id)
  return prices.slice().sort((a, b) => {
    const aVal = parseVariation(a.variation)
    const bVal = parseVariation(b.variation)
    return aVal - bVal
  })
})

const variationModel = computed({
  get: () => editingPrice.value ? editingPrice.value.variation : newPrice.value.variation,
  set: (value) => {
    if (editingPrice.value) {
      editingPrice.value.variation = value
    } else {
      newPrice.value.variation = value
    }
  }
})

const priceModel = computed({
  get: () => editingPrice.value ? editingPrice.value.price : newPrice.value.price,
  set: (value) => {
    if (editingPrice.value) {
      editingPrice.value.price = value
    } else {
      newPrice.value.price = value
    }
  }
})

const validatePrice = () => {
  // Only validate variation when adding new price
  if (!editingPrice.value && !newPrice.value.variation.trim()) {
    errorMessage.value = 'Variation is required'
    return false
  }
  
  const priceToValidate = editingPrice.value ? editingPrice.value.price : newPrice.value.price
  if (!priceToValidate || priceToValidate <= 0) {
    errorMessage.value = 'Price must be greater than 0'
    return false
  }
  
  errorMessage.value = ''
  return true
}

const addPrice = async () => {
  if (!selectedProduct.value || !validatePrice()) return
  
  isLoading.value = true
  try {
    await priceStore.addPrice(selectedProduct.value.id, newPrice.value)
    newPrice.value = { variation: '', price: null }
  } catch (error) {
    errorMessage.value = 'Failed to add price'
  } finally {
    isLoading.value = false
  }
}

const editPrice = (price) => {
  editingPrice.value = { ...price }
}

const updatePrice = async () => {
  if (!selectedProduct.value || !validatePrice()) return
  
  isLoading.value = true
  try {
    await priceStore.updatePrice(editingPrice.value.id, { price: editingPrice.value.price })
    editingPrice.value = null
  } catch (error) {
    errorMessage.value = 'Failed to update price'
  } finally {
    isLoading.value = false
  }
}

const deletePrice = async (priceId) => {
  isLoading.value = true
  try {
    await priceStore.deletePrice(priceId)
  } catch (error) {
    errorMessage.value = 'Failed to delete price'
  } finally {
    isLoading.value = false
  }
}
</script>

<template>
  <div class="price-management">
    <div class="price-header">
      <div class="search-filter">
        <div class="search-box">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
          <input 
            type="text" 
            v-model="props.searchTerm" 
            placeholder="Search products..." 
            class="search-input"
            readonly
          />
        </div>
      </div>
    </div>
    
    <div v-if="isLoading" class="loading-container">
      <div class="loading-spinner"></div>
      <div>Loading products and prices...</div>
    </div>
    <div v-else-if="filteredProducts.length === 0" class="empty-state">
      <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="8" y1="12" x2="16" y2="12"></line>
      </svg>
      <h3>No products found</h3>
      <p>Products need to be created before you can manage prices</p>
    </div>
    <template v-else>
      <div class="product-select">
        <label>Select Product</label>
        <div class="select-container">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
            <line x1="7" y1="7" x2="7.01" y2="7"></line>
          </svg>
          <select v-model="selectedProductId" :disabled="isLoading">
            <option value="">Select a product</option>
            <option 
              v-for="product in filteredProducts" 
              :key="product.id" 
              :value="product.id"
            >
              {{ product.name }}
            </option>
          </select>
          <svg class="select-arrow" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="6 9 12 15 18 9"></polyline>
          </svg>
        </div>
      </div>

      <div v-if="selectedProduct" class="price-card">
        <h3 class="price-title">
          <span>{{ editingPrice ? 'Edit Price' : 'Add New Price' }}</span>
          <span class="product-name">for {{ selectedProduct.name }}</span>
        </h3>
        
        <div class="form-row">
          <div class="form-group">
            <label>Variation</label>
            <div class="input-container">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M18 8h1a4 4 0 0 1 0 8h-1"></path>
                <path d="M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z"></path>
                <line x1="6" y1="1" x2="6" y2="4"></line>
                <line x1="10" y1="1" x2="10" y2="4"></line>
                <line x1="14" y1="1" x2="14" y2="4"></line>
              </svg>
              <input 
                v-model="variationModel"
                placeholder="e.g. 1kg, 2kg"
                :disabled="isLoading || !!editingPrice"
                :readonly="!!editingPrice"
                class="form-input"
              />
            </div>
          </div>
          
          <div class="form-group">
            <label>Price</label>
            <div class="input-container">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="12" y1="1" x2="12" y2="23"></line>
                <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
              </svg>
              <input 
                type="number" 
                v-model.number="priceModel"
                :disabled="isLoading"
                placeholder="Enter price"
                class="form-input"
              />
            </div>
          </div>
          
          <div class="form-actions">
            <button 
              v-if="editingPrice"
              @click="editingPrice = null"
              class="cancel-button"
              :disabled="isLoading"
            >
              Cancel
            </button>
            <button 
              @click="editingPrice ? updatePrice() : addPrice()"
              class="action-button"
              :disabled="isLoading"
            >
              <svg v-if="isLoading" class="spinner" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="12" y1="2" x2="12" y2="6"></line>
                <line x1="12" y1="18" x2="12" y2="22"></line>
                <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line>
                <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line>
                <line x1="2" y1="12" x2="6" y2="12"></line>
                <line x1="18" y1="12" x2="22" y2="12"></line>
                <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line>
                <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>
              </svg>
              <span>{{ editingPrice ? 'Update' : 'Add' }} Price</span>
            </button>
          </div>
        </div>
      </div>

      <div v-if="errorMessage" class="error-message">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
        {{ errorMessage }}
      </div>

      <div v-if="selectedProduct && currentPrices.length > 0" class="price-table-container">
        <h3>Current Prices</h3>
        <div class="price-table">
          <table>
            <thead>
              <tr>
                <th>Variation</th>
                <th>Price</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="price in currentPrices" :key="price.id">
                <td>{{ price.variation }}</td>
                <td>{{ price.price }}</td>
                <td class="actions">
                  <button @click="editPrice(price)" class="edit-button" title="Edit price">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                      <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                    </svg>
                  </button>
                  <button @click="deletePrice(price.id)" class="delete-button" title="Delete price">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="3 6 5 6 21 6"></polyline>
                      <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                    </svg>
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div v-else-if="selectedProduct" class="empty-price-state">
        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
          <line x1="12" y1="1" x2="12" y2="23"></line>
          <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
        </svg>
        <p>No prices yet for this product</p>
        <p class="hint">Add your first price variation above</p>
      </div>
    </template>
  </div>
</template>

<style scoped>
.price-management {
  padding: var(--space-md);
}

.price-header {
  margin-bottom: var(--space-md);
}

.search-filter {
  display: flex;
  align-items: center;
  margin-bottom: var(--space-md);
}

.search-box {
  display: flex;
  align-items: center;
  background-color: white;
  border-radius: var(--border-radius);
  padding: var(--space-xs) var(--space-sm);
  box-shadow: var(--shadow-sm);
  width: 100%;
  max-width: 300px;
  border: 1px solid rgba(0, 0, 0, 0.1);
}

.search-box svg {
  color: var(--color-text-secondary, #666);
  margin-right: var(--space-xs);
}

.search-input {
  flex: 1;
  border: none;
  outline: none;
  font-size: var(--font-size-sm);
  background: transparent;
}

.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--space-xl);
  color: var(--color-text-secondary, #666);
  gap: var(--space-md);
}

.loading-spinner {
  width: 40px;
  height: 40px;
  border: 4px solid rgba(0, 0, 0, 0.1);
  border-radius: 50%;
  border-top-color: var(--color-primary);
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--space-xl);
  color: var(--color-text-secondary, #666);
  gap: var(--space-md);
  text-align: center;
}

.empty-state svg, .empty-price-state svg {
  color: var(--color-text-tertiary, #999);
  opacity: 0.5;
}

.empty-state h3 {
  margin: 0;
  font-size: var(--font-size-lg);
  font-weight: 500;
  color: var(--color-text);
}

.empty-state p, .empty-price-state p {
  margin: 0;
  font-size: var(--font-size-sm);
}

.product-select {
  margin-bottom: var(--space-md);
}

.product-select label {
  display: block;
  margin-bottom: var(--space-xs);
  font-weight: 500;
  color: var(--color-text);
}

.select-container {
  position: relative;
  display: flex;
  align-items: center;
}

.select-container svg:first-child {
  position: absolute;
  left: var(--space-sm);
  color: var(--color-text-secondary, #666);
  opacity: 0.7;
}

.select-arrow {
  position: absolute;
  right: var(--space-sm);
  color: var(--color-text-secondary, #666);
  pointer-events: none;
}

.select-container select {
  width: 100%;
  padding: var(--space-sm) var(--space-sm) var(--space-sm) var(--space-lg);
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: var(--border-radius);
  font-size: var(--font-size-sm);
  appearance: none;
  -webkit-appearance: none;
  background: white;
  cursor: pointer;
}

.price-card {
  background: white;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-sm);
  border: 1px solid rgba(0, 0, 0, 0.05);
  padding: var(--space-md);
  margin-bottom: var(--space-md);
}

.price-title {
  display: flex;
  flex-direction: column;
  margin-top: 0;
  margin-bottom: var(--space-md);
  font-size: var(--font-size-md);
  font-weight: 600;
  color: var(--color-text);
}

.product-name {
  font-size: var(--font-size-sm);
  color: var(--color-text-secondary, #666);
  font-weight: 400;
}

.form-row {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-md);
  align-items: flex-end;
}

.form-group {
  flex: 1;
  min-width: 200px;
}

.form-group label {
  display: block;
  margin-bottom: var(--space-xs);
  font-weight: 500;
  color: var(--color-text);
  font-size: var(--font-size-sm);
}

.input-container {
  position: relative;
  display: flex;
  align-items: center;
}

.input-container svg {
  position: absolute;
  left: var(--space-sm);
  color: var(--color-text-secondary, #666);
  opacity: 0.7;
}

.form-input {
  width: 100%;
  padding: var(--space-sm) var(--space-sm) var(--space-sm) var(--space-lg);
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: var(--border-radius);
  font-size: var(--font-size-sm);
  transition: all 0.2s ease;
}

.form-input:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px rgba(66, 185, 131, 0.15);
}

.form-input:read-only {
  background-color: #f9f9f9;
}

.form-actions {
  display: flex;
  gap: var(--space-sm);
  align-items: center;
}

.action-button, .cancel-button {
  display: flex;
  align-items: center;
  gap: var(--space-xs);
  padding: var(--space-sm) var(--space-md);
  border: none;
  border-radius: var(--border-radius);
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  white-space: nowrap;
}

.action-button {
  background-color: var(--color-primary);
  color: white;
}

.action-button:hover:not(:disabled) {
  background-color: var(--color-primary-dark, #3aa876);
}

.cancel-button {
  background-color: #f0f0f0;
  color: var(--color-text);
}

.cancel-button:hover:not(:disabled) {
  background-color: #e0e0e0;
}

button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.error-message {
  display: flex;
  align-items: center;
  gap: var(--space-xs);
  margin: var(--space-md) 0;
  padding: var(--space-sm) var(--space-md);
  background-color: #ffebee;
  color: #c62828;
  border-radius: var(--border-radius);
  font-size: var(--font-size-sm);
}

.price-table-container {
  background: white;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-sm);
  border: 1px solid rgba(0, 0, 0, 0.05);
  padding: var(--space-md);
  overflow: hidden;
}

.price-table-container h3 {
  margin-top: 0;
  margin-bottom: var(--space-md);
  font-size: var(--font-size-md);
  font-weight: 600;
  color: var(--color-text);
}

.price-table {
  overflow-x: auto;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: var(--space-sm) var(--space-md);
  text-align: left;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

th {
  font-weight: 500;
  color: var(--color-text-secondary, #666);
  font-size: var(--font-size-sm);
  background-color: #f9f9f9;
}

td {
  font-size: var(--font-size-sm);
}

.actions {
  display: flex;
  gap: var(--space-xs);
}

.edit-button, .delete-button {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  border: none;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: all 0.2s ease;
}

.edit-button {
  background-color: var(--color-primary-light, #e8f5e9);
  color: var(--color-primary, #42b983);
}

.edit-button:hover {
  background-color: var(--color-primary, #42b983);
  color: white;
}

.delete-button {
  background-color: rgba(255, 68, 68, 0.1);
  color: #ff4444;
}

.delete-button:hover {
  background-color: #ff4444;
  color: white;
}

.empty-price-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--space-lg);
  gap: var(--space-sm);
  text-align: center;
  background: white;
  border-radius: var(--border-radius);
  border: 1px solid rgba(0, 0, 0, 0.05);
  box-shadow: var(--shadow-sm);
}

.hint {
  font-size: var(--font-size-xs);
  color: var(--color-text-tertiary, #999);
}

.spinner {
  animation: spin 1s linear infinite;
}

@media (max-width: 768px) {
  .form-row {
    flex-direction: column;
    gap: var(--space-md);
  }
  
  .form-group {
    min-width: 100%;
  }
  
  .form-actions {
    margin-top: var(--space-sm);
    width: 100%;
  }
  
  .action-button, .cancel-button {
    flex: 1;
    justify-content: center;
  }
}
</style>
