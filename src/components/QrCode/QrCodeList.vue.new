<template>
  <div v-if="codes.length > 0" class="qr-codes">
    <div class="section-header">
      <div class="header-main">
        <h2>QR Codes in Batch</h2>
        <span class="code-count">{{ codes.length }} QR codes</span>
      </div>
      <div class="header-actions">
        <button class="action-button" @click="copyAllIds" title="Copy all IDs">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
          </svg>
          <span>Copy All IDs</span>
        </button>
        <button class="action-button download-btn" @click="downloadAllQrCodes" title="Download All QR Codes">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7 10 12 15 17 10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
          <span>Download All</span>
        </button>
      </div>
    </div>
    
    <div class="qr-code-list">
      <div v-for="(code, index) in codes" :key="index" class="qr-code-item">
        <div class="qr-code-image">
          <canvas
            ref="qrCanvas"
            :data-value="JSON.stringify({ id: code.id })"
            width="150"
            height="150"
          ></canvas>
        </div>
        <div class="qr-code-details">
          <div class="qr-id">
            <span class="id-label">ID:</span>
            <span class="id-value">{{ shortenId(code.id) }}</span>
            <button class="copy-btn" @click="copyToClipboard(code.id)" title="Copy ID">
              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
              </svg>
            </button>
          </div>
          <div class="qr-manual-id">{{ code.manual_identifier || 'No manual ID' }}</div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, watch, onMounted } from 'vue'
import QRCode from 'qrcode'

const props = defineProps({
  codes: {
    type: Array,
    required: true,
  },
})

// Helper functions for new features
const shortenId = (id) => {
  if (!id) return 'N/A'
  return id.length > 10 ? `${id.substring(0, 10)}...` : id
}

const copyToClipboard = async (text) => {
  try {
    await navigator.clipboard.writeText(text)
    alert('ID copied to clipboard')
  } catch (err) {
    console.error('Failed to copy: ', err)
  }
}

const copyAllIds = async () => {
  try {
    const allIds = props.codes.map(code => code.id).join('\n')
    await navigator.clipboard.writeText(allIds)
    alert('All IDs copied to clipboard')
  } catch (err) {
    console.error('Failed to copy all IDs: ', err)
  }
}

const downloadAllQrCodes = async () => {
  try {
    // Create a zip file with all QR codes
    alert('Download feature will be implemented soon')
    // TODO: Implement download functionality using JSZip or similar library
  } catch (err) {
    console.error('Failed to download QR codes: ', err)
  }
}

const generateDisplayQRCodes = async () => {
  const canvases = document.querySelectorAll('canvas')
  if (!canvases) return

  for (const canvas of canvases) {
    try {
      const ctx = canvas.getContext('2d')
      const data = canvas.dataset.value

      await QRCode.toCanvas(canvas, data, {
        width: 150,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#ffffff',
        },
      })
    } catch (error) {
      console.error('Error generating QR code:', error)
    }
  }
}

watch(
  () => props.codes,
  async () => {
    await generateDisplayQRCodes()
  },
)

onMounted(async () => {
  await generateDisplayQRCodes()
})
</script>

<style scoped>
.qr-codes {
  margin-bottom: 1.5rem;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  flex-wrap: wrap;
  gap: 1rem;
}

.header-main {
  display: flex;
  align-items: baseline;
  gap: 1rem;
}

.section-header h2 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 500;
  color: var(--color-secondary);
}

.code-count {
  color: #666;
  font-size: 0.95rem;
}

.header-actions {
  display: flex;
  gap: 0.75rem;
}

.action-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.6rem 1rem;
  border-radius: 6px;
  background-color: white;
  border: 1px solid #e0e0e0;
  color: #555;
  font-size: 0.9rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.action-button:hover {
  border-color: #ccc;
  background-color: #f9f9f9;
}

.download-btn {
  background-color: rgba(0, 220, 130, 0.1);
  border-color: rgba(0, 220, 130, 0.3);
  color: var(--color-primary);
}

.download-btn:hover {
  background-color: rgba(0, 220, 130, 0.15);
  border-color: var(--color-primary);
}

.qr-code-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 1.25rem;
  padding: 1.5rem;
  background-color: #f9f9f9;
  border-radius: 12px;
}

.qr-code-item {
  display: flex;
  flex-direction: column;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  overflow: hidden;
  transition: all 0.2s;
}

.qr-code-item:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.08);
}

.qr-code-image {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1rem;
  background-color: white;
  border-bottom: 1px solid #f0f0f0;
}

.qr-code-image canvas {
  border-radius: 6px;
}

.qr-code-details {
  padding: 0.75rem;
  background-color: #fafafa;
}

.qr-id {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 0.25rem;
}

.id-label {
  font-size: 0.8rem;
  font-weight: 600;
  color: #666;
}

.id-value {
  font-size: 0.8rem;
  font-family: monospace;
  color: #555;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.copy-btn {
  background: transparent;
  border: none;
  color: #999;
  cursor: pointer;
  padding: 3px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  transition: all 0.2s;
  margin-left: auto;
}

.copy-btn:hover {
  background-color: rgba(0, 0, 0, 0.05);
  color: #555;
}

.qr-manual-id {
  font-size: 0.85rem;
  color: #777;
  background-color: #f0f0f0;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  margin-top: 0.25rem;
  text-align: center;
  font-family: monospace;
  word-break: break-all;
}

@media (max-width: 768px) {
  .section-header {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .header-actions {
    width: 100%;
  }
  
  .qr-code-list {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }
}

@media print {
  .header-actions, .copy-btn {
    display: none;
  }
  
  .qr-code-list {
    gap: 0.5rem;
    padding: 0.5rem;
  }

  .qr-code-item {
    break-inside: avoid;
    page-break-inside: avoid;
    box-shadow: none;
  }
}
</style>
